import snowflake.snowpark as snowpark
import pandas as pd 
from snowflake.snowpark.functions import col

def load_sidecar_table(session, app_name, app_user): 
    # Your code goes here, inside the "main" handler.

    sidecar_cmds_count = int(pd.DataFrame(session.sql(f"SELECT COUNT(*) FROM {app_name}.SETUP.SQL").collect()).iloc[0,0])

    if sidecar_cmds_count == 0:
      APP_ADMIN_ROLE = f'C_[[APP_CODE]]_APP_ADMIN'
      
      APP_WH = f'C_[[APP_CODE]]_APP_WH'

      HELPER_DB = f'C_[[APP_CODE]]_HELPER_DB';

      # create admin role
      use_SA = 'USE ROLE SECURITYADMIN;'
      create_role = f'CREATE ROLE IF NOT EXISTS {APP_ADMIN_ROLE} ;'
      role_comment = """ALTER ROLE IF EXISTS """+APP_ADMIN_ROLE+""" SET COMMENT = '{"origin":"sf_sit","name":"acf","version":{"major":1, "minor":6},"attributes":{"role":"consumer","component":"app_admin_role"}}'""";
      grant_role_1 = f'GRANT ROLE {APP_ADMIN_ROLE} TO ROLE SYSADMIN;'
      grant_role_2 = f'GRANT ROLE {APP_ADMIN_ROLE} TO USER "{app_user}"';

      # grant privileges to admin role
      use_AA = 'USE ROLE ACCOUNTADMIN;'
      grant_role_3 = f'GRANT IMPORT SHARE ON ACCOUNT TO ROLE {APP_ADMIN_ROLE}';
      grant_role_4 = f'GRANT CREATE DATABASE ON ACCOUNT TO ROLE {APP_ADMIN_ROLE}';
      grant_role_5 = f'GRANT CREATE WAREHOUSE ON ACCOUNT TO ROLE {APP_ADMIN_ROLE}';
      grant_role_6 = f'GRANT CREATE APPLICATION ON ACCOUNT TO ROLE {APP_ADMIN_ROLE}';

      #grant app role to admin role
      grant_role_7 = f'GRANT APPLICATION ROLE {app_name}.app_role TO ROLE {APP_ADMIN_ROLE}';

      use_APP_ADMIN = f'USE ROLE {APP_ADMIN_ROLE}';


      MAKE_WH = """CREATE OR REPLACE WAREHOUSE """+APP_WH+""" WITH WAREHOUSE_SIZE = 'XSMALL' 
        COMMENT = '{"origin":"sf_sit","name":"acf","version":{"major":1, "minor":6},"attributes":{"role":"consumer","component":"app_warehouse"}}';
      """

      use_wh = f'USE WAREHOUSE {APP_WH}';

      # source data db/schemas
      create_db = f'CREATE DATABASE IF NOT EXISTS {HELPER_DB};'

      use_db = f'USE DATABASE {HELPER_DB}';
      create_source = 'CREATE SCHEMA IF NOT EXISTS SOURCE'
      create_results = 'CREATE SCHEMA IF NOT EXISTS RESULTS;'
      create_private = 'CREATE SCHEMA IF NOT EXISTS PRIVATE;'

    
      # sqls array
      sqls = [use_SA,
      create_role,
      role_comment,
      grant_role_1,
      grant_role_2,
      use_AA,
      grant_role_3,
      grant_role_4,
      grant_role_5,
      grant_role_6,
      grant_role_7,
      use_APP_ADMIN,
      MAKE_WH,
      use_wh,
      create_db,
      use_db,
      create_source,
      create_results,
      create_private
      ]
      for sql_text in sqls:
        sql_text = sql_text.replace("'",r"\'")
        session.sql(f"""
        INSERT INTO """+app_name+""".SETUP.SQL(SQL)
        VALUES
        ('"""+sql_text+"""')
        """).collect()
      

      return "SUCCESS"
    else:
      return "COMMANDS ALREADY LOADED AND EXECUTED. EXITING"